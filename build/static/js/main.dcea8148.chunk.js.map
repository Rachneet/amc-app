{"version":3,"sources":["Message.js","Progress.js","Title.js","FileUpload.js","App.js","index.js"],"names":["Message","msg","useState","show","setShow","Alert","variant","onClose","dismissible","Button","className","onClick","Progress","percentage","role","style","width","Title","FileUpload","file","setFile","setFilename","message","setMessage","uploadPercentage","setUploadPercentage","result","setResult","isLoading","setIsLoading","onSubmit","e","a","preventDefault","formData","FormData","append","axios","post","headers","onUploadProgress","progressEvent","parseInt","Math","round","loaded","total","setTimeout","res","data","console","log","response","status","options","page","sizePerPageList","text","value","length","sizePerPage","pageStartIndex","paginationSize","prePage","nextPage","firstPage","lastPage","Container","Form","method","Row","Col","paddingRight","paddingTop","color","type","onChange","target","files","name","disabled","paddingLeft","marginTop","headerStyle","backgroundColor","rowStyle","striped","hover","keyField","columns","dataField","pagination","paginationFactory","json","JSON","stringify","blob","Blob","url","URL","createObjectURL","document","createElement","href","download","click","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dcea8148.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\n\r\nconst Message = ({ msg }) => {\r\n  const [show, setShow] = useState(true);\r\n\r\n  if (show) {\r\n    return (\r\n      <Alert variant=\"warning\" onClose={() => setShow(false)} dismissible>\r\n          {msg}\r\n      </Alert>\r\n    );\r\n  }\r\n  return <Button className={\"alert-button\"} onClick={() => setShow(true)}>Show Alert</Button>;\r\n}\r\n\r\n\r\nMessage.propTypes = {\r\n  msg: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css'\r\n\r\nconst Progress = ({ percentage }) => {\r\n  return (\r\n    <div className='progress'>\r\n      <div\r\n        className='progress-bar progress-bar-striped bg-success'\r\n        role='progressbar'\r\n        style={{ width: `${percentage}%` }}\r\n      >\r\n        {percentage}%\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProgress.propTypes = {\r\n  percentage: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Progress;","import React from 'react'\r\nimport './App.css'\r\n\r\nfunction Title() {\r\n    return(\r\n        <div className=\"Title\">\r\n            <h1>Signal Modulation Predictor</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React, { Fragment, useState } from 'react';\r\nimport Message from './Message';\r\nimport Progress from './Progress';\r\nimport axios from 'axios';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Title from './Title'\r\nimport schema from './schema';\r\nimport Table from './Table';\r\nimport './App.css'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nconst FileUpload = () => {\r\n  const [file, setFile] = useState('');\r\n  const [filename, setFilename] = useState('Choose File');\r\n  const [uploadedFile, setUploadedFile] = useState({});\r\n  const [message, setMessage] = useState('');\r\n  const [uploadPercentage, setUploadPercentage] = useState(0);\r\n  const [result, setResult] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const onChange = e => {\r\n    setFile(e.target.files[0]);\r\n    setFilename(e.target.files[0].name);\r\n  };\r\n\r\n\r\n  const onSubmit = async e => {\r\n    e.preventDefault();\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    setIsLoading(true);\r\n      try {\r\n          const res = await axios.post('/api/upload', formData, {\r\n              headers: {\r\n                  'Content-Type': 'multipart/form-data'\r\n              },\r\n              onUploadProgress: progressEvent => {\r\n                  setUploadPercentage(\r\n                      parseInt(\r\n                          Math.round((progressEvent.loaded * 100) / progressEvent.total)\r\n                      )\r\n                  );\r\n\r\n                  // Clear percentage\r\n                  setTimeout(() => setUploadPercentage(0), 10000);\r\n              }\r\n          });\r\n\r\n          // const {fileName, filePath} = res.data;\r\n          setResult(res.data);\r\n          console.log(res.data);\r\n\r\n          // setUploadedFile({fileName, filePath});\r\n\r\n          setMessage('File Uploaded');\r\n          setIsLoading(false);\r\n\r\n      } catch (err) {\r\n          if (err.response.status === 500) {\r\n              setMessage('There was a problem with the server');\r\n          } else {\r\n              setMessage(err.response.data.msg);\r\n          }\r\n      }\r\n\r\n  };\r\n\r\n  const onDownload = e => {\r\n      e.preventDefault();\r\n\r\n\tvar json = JSON.stringify(result);\r\n    var blob = new Blob([json], {type: \"application/json\"});\r\n    var url  = URL.createObjectURL(blob);\r\n\tlet a = document.createElement('a');\r\n\ta.href = url;\r\n\ta.download = 'results.json';\r\n\ta.click();\r\n  };\r\n\r\n  // const Test = ({result}) => (\r\n  // <>\r\n  //   {result.map(res => (\r\n  //     <div className=\"results\" key={res.Modulation}>{res.Modulation}</div>\r\n  //   ))}\r\n  // </>\r\n  //   );\r\n\r\n    const columns= [\r\n    {\r\n        dataField: 'Modulation',\r\n        text: 'Modulation'\r\n    }];\r\n\r\n    const options = {\r\n                        page: 2,\r\n                        sizePerPageList: [ {\r\n                          text: '5', value: 5\r\n                        }, {\r\n                          text: '10', value: 10\r\n                        }, {\r\n                          text: 'All', value: result.length\r\n                        } ],\r\n                        sizePerPage: 5,\r\n                        pageStartIndex: 0,\r\n                        paginationSize: 3,\r\n                        prePage: 'Prev',\r\n                        nextPage: 'Next',\r\n                        firstPage: 'First',\r\n                        lastPage: 'Last',\r\n                      };\r\n\r\n\r\n  return (\r\n    <Fragment>\r\n      <Container>\r\n           <div><h1><Title /></h1></div>\r\n\r\n         <div className=\"container\">\r\n         <div className=\"row\">\r\n\r\n           <div className=\"col-md-6 center\">\r\n             <Form method=\"post\">\r\n\r\n                 <Row className={\"row-elements\"}>\r\n                    <Col style={{paddingRight: '50px', paddingTop:'-30px'}}>\r\n               <div className=\"form-group files color\">\r\n\r\n                 <label className={\"upload-label\"} style={{color: \"white\"}}>\r\n                     Upload Your .npz File\r\n                 </label>\r\n                 <input type=\"file\" className=\"form-control\"\r\n                 onChange={onChange}/>\r\n\r\n                 <Progress percentage={uploadPercentage} />\r\n\r\n                   <button type=\"button\" className=\"btn btn-success btn-block\"\r\n                           disabled={isLoading}\r\n                          onClick={!isLoading ? onSubmit : null}>\r\n                          { isLoading ? 'Predicting' : 'Upload' }\r\n\r\n                   </button>\r\n\r\n                   {/*<button type=\"button\" className=\"btn btn-success btn-block\" onClick={onSubmit}>*/}\r\n                   {/*    Predict Modulation*/}\r\n                   {/*</button>*/}\r\n\r\n                   {message ? <Message msg={message} /> : null}\r\n\r\n\r\n               </div>\r\n                    </Col>\r\n\r\n                     <Col style={{paddingLeft: '50px', paddingTop: '0px'}}>\r\n\r\n                  <div  className={\"table-div\"} style={{ marginTop: 0, color: 'white'}} >\r\n                <BootstrapTable\r\n                    headerStyle= {{ backgroundColor: 'white'}}\r\n                    rowStyle={ { color: 'white' } }\r\n                    striped\r\n                    hover\r\n                    keyField='id'\r\n                    data={ result }\r\n                    columns={ columns }\r\n                    pagination={ paginationFactory(options)}\r\n                />\r\n                    </div>\r\n\r\n                         <label style={{color: \"white\"}}>\r\n                             Download results: </label>\r\n\t\t\t\t<Button variant=\"primary\" onClick={onDownload}>Download</Button>\r\n             </Col>\r\n                 </Row>\r\n\r\n             </Form>\r\n\r\n\r\n           </div>\r\n         </div>\r\n       </div>\r\n       </Container>\r\n\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FileUpload;","import React from 'react';\nimport FileUpload from './FileUpload';\nimport './App.css';\n\n\nconst App = () => (\n  <div className='container mt-4'>\n    <FileUpload />\n  </div>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}